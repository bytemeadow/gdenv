name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [blaze/ubuntu-latest, blaze/macos-latest, windows-latest]
        rust: [stable]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test

      - name: Build
        run: cargo build --release

      - name: Test CLI help
        run: ./target/release/gdenv --help
        if: runner.os != 'Windows'

      - name: Test CLI help (Windows)
        run: ./target/release/gdenv.exe --help
        if: runner.os == 'Windows'

  install:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [blaze/ubuntu-latest, blaze/macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Test install script syntax (Unix)
        if: runner.os != 'Windows'
        run: |
          chmod +x install.sh
          sh -n install.sh

      - name: Test install script syntax (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Test PowerShell script syntax
          Get-Content install.ps1 | Out-Null

      - name: Test install script directly (Unix)
        if: runner.os != 'Windows'
        run: |
          # Test the install script from this branch
          chmod +x install.sh
          ./install.sh

      - name: Test install script directly (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Test the install script from this branch
          .\install.ps1

      - name: Add gdenv to PATH (Unix)
        if: runner.os != 'Windows'
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Add gdenv to PATH (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: echo "$env:LOCALAPPDATA\Programs\gdenv" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Verify installation (Unix)
        if: runner.os != 'Windows'
        run: |
          # Check if gdenv was installed and works
          if command -v gdenv >/dev/null 2>&1; then
            echo "✅ gdenv installed successfully and found in PATH"
            gdenv --version || gdenv --help
          else
            echo "❌ gdenv not found in PATH"
            echo "Checking if binary exists..."
            ls -la ~/.local/bin/gdenv* || echo "No gdenv binary found"
            exit 1
          fi

      - name: Verify installation (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Check if gdenv was installed and works
          if (Get-Command gdenv -ErrorAction SilentlyContinue) {
            Write-Host "✅ gdenv installed successfully and found in PATH"
            gdenv --version
          } else {
            Write-Host "❌ gdenv not found in PATH"
            Write-Host "Checking if binary exists..."
            Get-ChildItem "$env:USERPROFILE\.local\bin\gdenv*" -ErrorAction SilentlyContinue
            exit 1
          }
